{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\script\\base/assets\\script\\base\\network2.js"],"names":["base64","protobuf","util","PROTOCOL_PATH","for_maker","for_caller","window","require","socket","isConnect","isProtocolInited","protocolInfos","parseProtocol","filedata","cc","log","result","parse","packageName","package","objects","root","lookup","toJSON","Object","keys","nested","forEach","protocolName","protocol","map","fields","fieldName","push","startsWith","args","console","assert","length","fieldNames","data","i","argName","buffer","encode","finish","message","send","initProtocols","files","filepath","loader","loadRes","err","exports","connect","url","WebSocket","onopen","s_login_version","onmessage","e","datas","split","decodeArray","Uint8Array","decode","JSON","stringify","argValues","code","join","eval","onclose","director","emit","onerror","evt","isConnected"],"mappings":"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","file":"network2.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\script\\base","sourcesContent":["var base64 = protobuf.util.base64;\r\n\r\nvar PROTOCOL_PATH = \"./protocol\";\r\n\r\n// 上行协议全局变量\r\nvar for_maker = {}\r\n// 下行协议全局变量\r\nvar for_caller = {}\r\n\r\nwindow.for_maker = for_maker;\r\nwindow.for_caller = for_caller;\r\nrequire(\"binding\");\r\n\r\nvar socket = null;\r\nvar isConnect = false;\r\n\r\nvar isProtocolInited = false;\r\n\r\n// 配置只需要这4种数据类型\r\nvar protocolInfos = {};\r\n\r\n// 分析协议文件\r\nfunction parseProtocol(filedata) {\r\n    cc.log(\"parse filedata:\", filedata);\r\n    var result = protobuf.parse(filedata);\r\n    var packageName = result.package;\r\n    cc.log(\"parse package:\", packageName);\r\n\r\n    var objects = result.root.lookup(packageName).toJSON();\r\n    Object.keys(objects.nested).forEach(function (protocolName) {\r\n        var protocol = result.root.lookup(packageName + \".\" + protocolName);\r\n        cc.log(\" | protocol:\", protocolName);\r\n\r\n        var map = {\r\n            \"protocol\": protocol, // 协议数据\r\n            \"packageName\": packageName, // 协议package名\r\n            \"fieldNames\": [] // 协议参数列表\r\n        };\r\n        protocolInfos[protocolName] = map;\r\n\r\n        Object.keys(protocol.fields).forEach(function (fieldName) {\r\n            cc.log(\" |-- field:\", fieldName);\r\n            protocolInfos[protocolName][\"fieldNames\"].push(fieldName);\r\n        });\r\n\r\n        // 封装协议函数\r\n        if (protocolName.startsWith(\"s_\")) {\r\n            cc.log(\"init protocol:\", protocolName);\r\n            // 下行协议for_caller封装\r\n            for_caller[protocolName] = function (...args) {\r\n                // TODO 连接已断开的处理\r\n                if (!isConnect) {\r\n                    cc.log(\"> 连接已断开\");\r\n                    return;\r\n                }\r\n                console.assert(args.length == map.fieldNames.length);\r\n\r\n                // 创建协议参数数据结构\r\n                var data = {};\r\n                for (var i = 0; i < map.fieldNames.length; i++) {\r\n                    var argName = map.fieldNames[i];\r\n                    data[argName] = args[i];\r\n                }\r\n                // cc.log(\"> \" + protocolName + \": \" + JSON.stringify(data));\r\n\r\n                // Protobuf编码\r\n                var buffer = map.protocol.encode(data).finish();\r\n                // Base64编码之后发送出去\r\n                var message = protocolName + \"|\" + base64.encode(buffer, 0, buffer.length);\r\n                socket.send(message);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n// 初始化协议\r\nfunction initProtocols() {\r\n    // 先获取协议目录下的所有协议文件\r\n    var files = [\r\n        \"./protocol/login\",\r\n        \"./protocol/user\",\r\n        \"./protocol/racing\"\r\n    ];\r\n\r\n    // cc.log(files)\r\n    for (var i = 0, length = files.length; i < length; i++) {\r\n        // 文件相对路径\r\n        var filepath = files[i];\r\n        // 文件内容\r\n        cc.loader.loadRes(filepath, function (err, filedata) {\r\n            // 分析协议文件\r\n            parseProtocol(filedata);\r\n        });\r\n    }\r\n}\r\n\r\nexports.initProtocols = function () {\r\n    if (isProtocolInited) return;\r\n    isProtocolInited = true;\r\n    initProtocols();\r\n}\r\n\r\nexports.connect = function (url) {\r\n    // 连接\r\n    cc.log(\"connect->\" + url)\r\n    socket = new WebSocket(url);\r\n\r\n    socket.onopen = function () {\r\n        isConnect = true;\r\n        cc.log(\"服务器已连接\");\r\n        for_caller.s_login_version(1);\r\n    }\r\n\r\n    socket.onmessage = function (e) {\r\n        var message = e.data;\r\n        console.log(\"received: %s\", message);\r\n        var datas = message.split(\"|\");\r\n        if (datas.length != 2) return;\r\n\r\n        // 查找for_maker函数\r\n        var protocolName = datas[0];\r\n        if (for_maker[protocolName]) {\r\n            var map = protocolInfos[protocolName];\r\n            var data = datas[1];\r\n            var decodeArray = new Uint8Array(base64.length(data));\r\n            base64.decode(data, decodeArray, 0);\r\n            var args = map.protocol.decode(decodeArray);\r\n\r\n            cc.log(\"> \" + protocolName + \": \" + JSON.stringify(args));\r\n\r\n            var argValues = [];\r\n            for (var i = 0; i < map.fieldNames.length; i++) {\r\n                var argName = map.fieldNames[i];\r\n                argValues.push(\"args.\" + argName);\r\n            }\r\n            var code = \"for_maker[protocolName](\" + argValues.join(\", \") + \");\";\r\n            eval(code);\r\n        }\r\n    }\r\n\r\n    socket.onclose = function () {\r\n        isConnect = false;\r\n        cc.log(\"服务器已断开连接\");\r\n        cc.director.emit(\"FINISH\", {});\r\n    };\r\n\r\n    socket.onerror = function (evt) {\r\n        isConnect = false;\r\n        cc.log(\"服务器链接错误\");\r\n        cc.director.emit(\"FINISH\", {});\r\n    };\r\n\r\n}\r\n\r\nexports.isConnected = function () {\r\n    return isConnect;\r\n}\r\n\r\n"]}